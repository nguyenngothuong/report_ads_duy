import streamlit as st
import pandas as pd
from database import save_spend_data, save_revenue_data, get_data, remove_spend_data, remove_revenue_data
from datetime import datetime

def show_data_entry():
    st.header('Nh·∫≠p d·ªØ li·ªáu')
    
    # Th√™m checkbox cho h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    if st.checkbox('Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng', False, key='data_entry_guide'):
        st.info("""
        ### üìå H∆∞·ªõng d·∫´n nh·∫≠p li·ªáu
        
        1. **Ch·ªçn lo·∫°i d·ªØ li·ªáu:**
           - Chi ph√≠ (Spend): Nh·∫≠p d·ªØ li·ªáu chi ph√≠ qu·∫£ng c√°o
           - Doanh thu (Revenue): Nh·∫≠p d·ªØ li·ªáu doanh thu
        
        2. **Nh·∫≠p d·ªØ li·ªáu chi ph√≠:**
           - Ng√†y (yyyy-mm-dd): V√≠ d·ª• 2024-02-01
           - AD_NAME: T√™n qu·∫£ng c√°o (ph·∫£i kh·ªõp v·ªõi ƒë·ªãnh d·∫°ng)
           - Chi ph√≠: S·ªë ti·ªÅn chi cho qu·∫£ng c√°o
        
        3. **Nh·∫≠p d·ªØ li·ªáu doanh thu:**
           - Ng√†y (yyyy-mm-dd): V√≠ d·ª• 2024-02-01
           - SUBID1: M√£ ƒë·ªãnh danh c·∫•p 1 (b·∫Øt bu·ªôc)
           - SUBID2: M√£ ƒë·ªãnh danh c·∫•p 2 (b·∫Øt bu·ªôc)
           - SUBID3: M√£ ƒë·ªãnh danh c·∫•p 3 (t√πy ch·ªçn)
           - Doanh thu: S·ªë ti·ªÅn thu ƒë∆∞·ª£c
           - AD_NAME: T·ª± ƒë·ªông t·∫°o t·ª´ SUBID1 v√† SUBID2
        
        4. **C√°c t√≠nh nƒÉng h·ªó tr·ª£:**
           - Th√™m d√≤ng: Click n√∫t + ·ªü cu·ªëi b·∫£ng
           - X√≥a d√≤ng: Click n√∫t X b√™n ph·∫£i d√≤ng
           - T·∫£i l·∫°i d·ªØ li·ªáu: C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t
        
        5. **L∆∞u √Ω quan tr·ªçng:**
           - ƒê·ªãnh d·∫°ng ng√†y ph·∫£i ch√≠nh x√°c (yyyy-mm-dd)
           - Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
           - Ki·ªÉm tra k·ªπ d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u
           - C√≥ th·ªÉ xem l·∫°i d·ªØ li·ªáu ƒë√£ nh·∫≠p ·ªü b·∫£ng b√™n d∆∞·ªõi
        
        6. **X·ª≠ l√Ω l·ªói:**
           - N·∫øu c√≥ l·ªói, h·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã th√¥ng b√°o
           - Ki·ªÉm tra v√† s·ª≠a c√°c l·ªói tr∆∞·ªõc khi l∆∞u l·∫°i
           - Li√™n h·ªá admin n·∫øu g·∫∑p l·ªói kh√¥ng x√°c ƒë·ªãnh
        """)
    
    table_choice = st.radio("Ch·ªçn b·∫£ng ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu", ("Chi ph√≠ (Spend)", "Doanh thu (Revenue)"))
    
    if table_choice == "Chi ph√≠ (Spend)":
        show_spend_form()
    else:
        show_revenue_form()

    show_current_data()

def is_valid_date(date_string):
    try:
        datetime.strptime(date_string, '%Y-%m-%d')
        return True
    except ValueError:
        return False

def show_spend_form():
    st.subheader("Nh·∫≠p d·ªØ li·ªáu chi ph√≠")
    
    st.info("""
    H∆∞·ªõng d·∫´n nh·∫≠p li·ªáu:
    - Ng√†y: Nh·∫≠p theo ƒë·ªãnh d·∫°ng yyyy-mm-dd (v√≠ d·ª•: 2024-02-01)
    - AD_NAME: T√™n qu·∫£ng c√°o
    - Chi ph√≠: S·ªë ti·ªÅn chi cho qu·∫£ng c√°o
    """)
    
    # T·∫°o DataFrame ban ƒë·∫ßu
    if 'spend_data' not in st.session_state:
        st.session_state.spend_data = pd.DataFrame(
            columns=["day", "ad_name", "spend"],
            data=[["", "", 0.0]]
        )
    
    # Hi·ªÉn th·ªã data editor
    edited_df = st.data_editor(
        st.session_state.spend_data,
        num_rows="dynamic",
        column_config={
            "day": st.column_config.TextColumn("Ng√†y (yyyy-mm-dd)"),
            "ad_name": st.column_config.TextColumn("AD_NAME"),
            "spend": st.column_config.NumberColumn("Chi ph√≠", min_value=0.0, format="%.2f")
        }
    )
    
    # C·∫≠p nh·∫≠t DataFrame trong session state
    st.session_state.spend_data = edited_df
    
    if st.button("L∆∞u d·ªØ li·ªáu chi ph√≠"):
        invalid_dates = []
        empty_fields = []
        for index, row in edited_df.iterrows():
            if not row["day"] or not row["ad_name"] or not row["spend"]:
                empty_fields.append(index + 1)
            elif not is_valid_date(row["day"]):
                invalid_dates.append(index + 1)
        
        if empty_fields:
            st.error(f"C√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ·ªü (c√°c) d√≤ng: {', '.join(map(str, empty_fields))}.")
        elif invalid_dates:
            st.error(f"Ng√†y kh√¥ng h·ª£p l·ªá ·ªü (c√°c) d√≤ng: {', '.join(map(str, invalid_dates))}. Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng yyyy-mm-dd.")
        else:
            for _, row in edited_df.iterrows():
                if row["day"] and row["ad_name"] and row["spend"]:
                    date = datetime.strptime(row["day"], '%Y-%m-%d')
                    save_spend_data(date, row["ad_name"], row["spend"])
            st.success("ƒê√£ l∆∞u d·ªØ li·ªáu chi ph√≠ th√†nh c√¥ng!")

def show_revenue_form():
    st.subheader("Nh·∫≠p d·ªØ li·ªáu doanh thu")
    
    st.info("""
    H∆∞·ªõng d·∫´n nh·∫≠p li·ªáu:
    - Ng√†y: Nh·∫≠p theo ƒë·ªãnh d·∫°ng yyyy-mm-dd (v√≠ d·ª•: 2024-02-01)
    - SUBID1, SUBID2: Th√¥ng tin ƒë·ªãnh danh qu·∫£ng c√°o (b·∫Øt bu·ªôc)
    - SUBID3: Th√¥ng tin b·ªï sung (kh√¥ng b·∫Øt bu·ªôc)
    - Doanh thu: S·ªë ti·ªÅn thu ƒë∆∞·ª£c
    - AD_NAME s·∫Ω t·ª± ƒë·ªông t·∫°o t·ª´ SUBID1 v√† SUBID2 khi l∆∞u d·ªØ li·ªáu
    """)
    
    # T·∫°o DataFrame ban ƒë·∫ßu
    if 'revenue_data' not in st.session_state:
        st.session_state.revenue_data = pd.DataFrame(
            columns=["day", "subid1", "subid2", "subid3", "revenue", "ad_name"],
            data=[["", "", "", "", 0.0, ""]]
        )
    
    # Hi·ªÉn th·ªã data editor
    edited_df = st.data_editor(
        st.session_state.revenue_data,
        num_rows="dynamic",
        column_config={
            "day": st.column_config.TextColumn("Ng√†y (yyyy-mm-dd)"),
            "subid1": st.column_config.TextColumn("SUBID1"),
            "subid2": st.column_config.TextColumn("SUBID2"), 
            "subid3": st.column_config.TextColumn("SUBID3"),
            "revenue": st.column_config.NumberColumn("Doanh thu", min_value=0.0, format="%.2f"),
            "ad_name": st.column_config.TextColumn("AD_NAME", disabled=True)
        }
    )
    
    # C·∫≠p nh·∫≠t DataFrame trong session state
    st.session_state.revenue_data = edited_df
    
    if st.button("L∆∞u d·ªØ li·ªáu doanh thu"):
        invalid_dates = []
        empty_fields = []
        for index, row in edited_df.iterrows():
            if not all([row["day"], row["subid1"], row["subid2"], row["revenue"]]):
                empty_fields.append(index + 1)
            elif not is_valid_date(row["day"]):
                invalid_dates.append(index + 1)
        
        if empty_fields:
            st.error(f"C√°c tr∆∞·ªùng b·∫Øt bu·ªôc (Ng√†y, SUBID1, SUBID2, Doanh thu) kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ·ªü (c√°c) d√≤ng: {', '.join(map(str, empty_fields))}.")
        elif invalid_dates:
            st.error(f"Ng√†y kh√¥ng h·ª£p l·ªá ·ªü (c√°c) d√≤ng: {', '.join(map(str, invalid_dates))}. Vui l√≤ng nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng yyyy-mm-dd.")
        else:
            for _, row in edited_df.iterrows():
                if all([row["day"], row["subid1"], row["subid2"], row["revenue"]]):
                    # T·∫°o ad_name khi l∆∞u d·ªØ li·ªáu
                    ad_name = f"{row['subid1']}-{row['subid2']}"
                    date = datetime.strptime(row["day"], '%Y-%m-%d')
                    save_revenue_data(date, row["subid1"], row["subid2"], row["subid3"], row["revenue"], ad_name)
            st.success("ƒê√£ l∆∞u d·ªØ li·ªáu doanh thu th√†nh c√¥ng!")

def show_current_data():
    st.subheader("D·ªØ li·ªáu hi·ªán t·∫°i")
    
    days = st.number_input("S·ªë ng√†y mu·ªën hi·ªÉn th·ªã", min_value=1, value=30, step=1)
    
    if st.button("T·∫£i l·∫°i d·ªØ li·ªáu"):
        st.cache_data.clear()
        st.success(f"ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu {days} ng√†y g·∫ßn nh·∫•t th√†nh c√¥ng!")
    
    df = get_data(days=days)  # L·∫•y d·ªØ li·ªáu theo s·ªë ng√†y ƒë∆∞·ª£c ch·ªçn
    st.dataframe(df)
